name: Ubuntu 22.04 Clang build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-ubuntu-clang:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    strategy:
      matrix:
        build_type: [ 'Debug', 'ReleaseWithDebInfo' ]

    steps:
    - uses: actions/checkout@v3
    
    - name: Install build prerequisites
      shell: bash -euxo pipefail {0}
      run: |
        wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc | sudo tee /etc/apt/trusted.gpg.d/apt.kitware.org.asc  >/dev/null
        echo 'deb https://apt.kitware.com/ubuntu/ jammy main'              | sudo tee /etc/apt/sources.list.d/kitware.list        >/dev/null
        wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key              | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc     >/dev/null
        echo 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main' | sudo tee /etc/apt/sources.list.d/llvm.list           >/dev/null
        wget -qO - https://www.postgresql.org/media/keys/ACCC4CF8.asc      | sudo tee /etc/apt/trusted.gpg.d/apt.postgres.org.asc >/dev/null
        echo 'deb http://apt.postgresql.org/pub/repos/apt jammy-pgdg main' | sudo tee /etc/apt/sources.list.d/pgdg.list           >/dev/null
        sudo apt update
        sudo apt install \
          cmake ninja-build \
          clang-15 lld-15 libc++-15-dev libc++abi-15-dev \
          libpq-dev=15.* libcurl4-openssl-dev

    - name: Configure CMake
      shell: bash -euxo pipefail {0}
      run: |
        cmake \
          -S ${{github.workspace}} \
          -B ${{github.workspace}}/build \
          -G Ninja \
          -D CMAKE_C_COMPILER=clang-15 \
          -D CMAKE_CXX_COMPILER=clang++-15 \
          -D CMAKE_CXX_FLAGS="-stdlib=libc++" \
          -D CMAKE_EXE_LINKER_FLAGS_INIT="-fuse-ld=lld-15" \
          -D CMAKE_BUILD_TYPE=${{ matrix.build_type }}   

    - name: Build
      shell: bash -euxo pipefail {0}
      working-directory: ${{github.workspace}}/build
      run: |
        cmake --build .

    - name: Test
      shell: bash -euxo pipefail {0}
      working-directory: ${{github.workspace}}/build/tests
      run: |
        ./ocse-test

  build-ubuntu-gcc:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    strategy:
      matrix:
        build_type: [ 'Debug', 'ReleaseWithDebInfo' ]

    steps:
    - uses: actions/checkout@v3
    
    - name: Install build prerequisites
      shell: bash -euxo pipefail {0}
      run: |
        wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc | sudo tee /etc/apt/trusted.gpg.d/apt.kitware.org.asc  >/dev/null
        echo 'deb https://apt.kitware.com/ubuntu/ jammy main'              | sudo tee /etc/apt/sources.list.d/kitware.list        >/dev/null
        wget -qO - https://www.postgresql.org/media/keys/ACCC4CF8.asc      | sudo tee /etc/apt/trusted.gpg.d/apt.postgres.org.asc >/dev/null
        echo 'deb http://apt.postgresql.org/pub/repos/apt jammy-pgdg main' | sudo tee /etc/apt/sources.list.d/pgdg.list           >/dev/null
        sudo apt update
        sudo apt install \
          cmake ninja-build \
          gcc-12 binutils libstdc++-12-dev \
          libpq-dev=15.* libcurl4-openssl-dev

    - name: Configure CMake
      shell: bash -euxo pipefail {0}
      run: |
        cmake \
          -S ${{github.workspace}} \
          -B ${{github.workspace}}/build \
          -G Ninja \
          -D CMAKE_C_COMPILER=gcc-12 \
          -D CMAKE_CXX_COMPILER=g++-12 \
          -D CMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      shell: bash -euxo pipefail {0}
      working-directory: ${{github.workspace}}/build
      run: |
        cmake --build .

    - name: Test
      shell: bash -euxo pipefail {0}
      working-directory: ${{github.workspace}}/build/tests
      run: |
        ./ocse-test